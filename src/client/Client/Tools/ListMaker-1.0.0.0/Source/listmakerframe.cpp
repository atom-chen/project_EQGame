/////////////////////////////////////////////////////////////////////////////
// Name:        listmakerframe.cpp
// Purpose:     
// Author:      xj
// Modified by: 
// Created:     17/11/2010 14:43:19
// RCS-ID:      
// Copyright:   XJ-1
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 17/11/2010 14:43:19

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"
#include "wx/dirdlg.h"
#include "wx/filedlg.h"
#include "wx/file.h"
#include "wx/textfile.h"

#include "tinyxml.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "listmakerframe.h"
#include "setrootdlg.h"
#include "addgroupdlg.h"
#include "additemdlg.h"

#include "SFuns.h"
#include "MD5Calculator.h"

////@begin XPM images
////@end XPM images

#define ELEMENT_LIST "List"
#define ELEMENT_GROUP "Group"
#define ELEMENT_ITEM "Item"
#define ATTRIBUTE_DIRECTORY "Directory"
#define ATTRIBUTE_TYPE "Type"
#define ATTRIBUTE_FILE "File"
#define ATTRIBUTE_CODE "Code"
#define ATTRIBUTE_PATH "Path"

#define wxELEMENT_LIST wxT(ELEMENT_LIST)
#define wxELEMENT_GROUP wxT(ELEMENT_GROUP)
#define wxELEMENT_ITEM wxT(ELEMENT_ITEM)
#define wxATTRIBUTE_DIRECTORY wxT(ATTRIBUTE_DIRECTORY)
#define wxATTRIBUTE_TYPE wxT(ATTRIBUTE_TYPE)
#define wxATTRIBUTE_FILE wxT(ATTRIBUTE_FILE)
#define wxATTRIBUTE_CODE wxT(ATTRIBUTE_CODE)
#define wxATTRIBUTE_PATH wxT(ATTRIBUTE_PATH)

#define FILE_STATUS_FIELD 2
#define PATH_STATUS_FIELD 1
#define RATE_STATUS_FIELD 3

/*
 * ListMakerFrame type definition
 */

IMPLEMENT_CLASS( ListMakerFrame, wxFrame )


/*
 * ListMakerFrame event table definition
 */

BEGIN_EVENT_TABLE( ListMakerFrame, wxFrame )

////@begin ListMakerFrame event table entries
    EVT_CLOSE( ListMakerFrame::OnCloseWindow )

    EVT_MENU( ID_MI_NEW, ListMakerFrame::OnMiNewClick )

    EVT_MENU( ID_MI_OPEN, ListMakerFrame::OnMiOpenClick )

    EVT_MENU( ID_MI_SAVE, ListMakerFrame::OnMiSaveClick )

    EVT_MENU( ID_MI_SAVEAS, ListMakerFrame::OnMiSaveasClick )

    EVT_MENU( ID_MI_EXIT, ListMakerFrame::OnMiExitClick )

    EVT_MENU( ID_MI_SETDIT, ListMakerFrame::OnMiSetditClick )

    EVT_MENU( ID_MI_ADDFILE, ListMakerFrame::OnMiAddfileClick )

    EVT_MENU( ID_MI_BUILD, ListMakerFrame::OnMiBuildClick )

    EVT_MENU( ID_MI_HELP, ListMakerFrame::OnMiHelpClick )

    EVT_MENU( ID_MI_ABOUT, ListMakerFrame::OnMiAboutClick )

	EVT_TEXT( ID_TEXTCTRL, ListMakerFrame::OnTextctrlTextUpdated )

	EVT_MENU( ID_MI_SET_ROOT, ListMakerFrame::OnMiSetRootClick )

	EVT_MENU( ID_MI_ADD_GROUP, ListMakerFrame::OnMiAddGroupClick )

	EVT_MENU( ID_MI_ADD_ITEM, ListMakerFrame::OnMiAddItemClick )

	EVT_MENU( ID_MI_CALC_NONE, ListMakerFrame::OnMiCalcNoneClick )

	EVT_MENU( ID_MI_CALC_ALL, ListMakerFrame::OnMiCalcAllClick )

	EVT_MENU( ID_MI_BUILD_LIST, ListMakerFrame::OnMiBuildListClick )

////@end ListMakerFrame event table entries

END_EVENT_TABLE()


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CheckDeclaration(TiXmlDocument &xmlDoc)
{
	bool hasDecl = false;
	TiXmlNode *xmlDecl = xmlDoc.FirstChild();
	while(xmlDecl)
	{
		if(TiXmlNode::TINYXML_DECLARATION == xmlDecl->Type())
		{
			hasDecl = true;
			break;
		}

		xmlDecl = xmlDecl->NextSibling();
	}
	if(false == hasDecl)
	{
		TiXmlDeclaration xmlDecl("1.0", "", "");
		if(xmlDoc.NoChildren())
			xmlDoc.InsertEndChild(xmlDecl);
		else
			xmlDoc.InsertBeforeChild(xmlDoc.FirstChild(), xmlDecl);
	}
}

void CheckRootElement(TiXmlDocument &xmlDoc)
{
	TiXmlElement *eleList = xmlDoc.RootElement();
	if(NULL == eleList)
	{
		eleList = new TiXmlElement(ELEMENT_LIST);
		eleList->SetAttribute(ATTRIBUTE_DIRECTORY, "");
		xmlDoc.LinkEndChild(eleList);
	}
}

void FormatXmlDoc( wxString &strXmlDoc )
{
	/*
	strXmlDoc.Replace(wxString::Format(wxT("<%s"), wxELEMENT_LIST), wxString::Format(wxT("\n<%s"), wxELEMENT_LIST));
	strXmlDoc.Replace(wxString::Format(wxT("<%s"), wxELEMENT_GROUP), wxString::Format(wxT("\n  <%s"), wxELEMENT_GROUP));
	strXmlDoc.Replace(wxString::Format(wxT("<%s"), wxELEMENT_ITEM), wxString::Format(wxT("\n    <%s"), wxELEMENT_ITEM));
	strXmlDoc.Replace(wxString::Format(wxT("</%s"), wxELEMENT_GROUP), wxString::Format(wxT("\n  </%s"), wxELEMENT_GROUP));
	strXmlDoc.Replace(wxString::Format(wxT("</%s"), wxELEMENT_LIST), wxString::Format(wxT("\n</%s"), wxELEMENT_LIST));
	*/

}

void PrintXmlAttributes(TiXmlElement &xmlEle, std::string &strXmlDoc)
{
	TiXmlAttribute *attr = xmlEle.FirstAttribute();

	while(attr)
	{
		strXmlDoc.append(" ");
		strXmlDoc.append(attr->Name());
		strXmlDoc.append("=");
		strXmlDoc.append("\"");
		strXmlDoc.append(attr->Value());
		strXmlDoc.append("\"");

		attr = attr->Next();
	}

}

void PrintXmlDoc(TiXmlDocument &xmlDoc, wxString &strXmlDoc)
{
	/*
	TiXmlPrinter xmlPrint;

	xmlPrint.SetStreamPrinting();
	xmlDoc.Accept(&xmlPrint);

	strXmlDoc = SFuns::S2WS(std::string(xmlPrint.CStr())).c_str();
	*/

	if(xmlDoc.NoChildren())
		return;

	std::string sXmlDoc;

	sXmlDoc.reserve(1024*1024);

	TiXmlNode *xmlDecl = xmlDoc.FirstChild();
	while(xmlDecl)
	{
		if(TiXmlNode::TINYXML_DECLARATION == xmlDecl->Type())
		{
			TiXmlDeclaration *dec = (TiXmlDeclaration *)xmlDecl;

			sXmlDoc.append("<?xml");

			if(dec->Version()[0] != 0)
			{
				sXmlDoc.append(" version=\"");
				sXmlDoc.append(dec->Version());
				sXmlDoc.append("\"");
			}

			if(dec->Encoding()[0] != 0)
			{
				sXmlDoc.append(" encoding=\"");
				sXmlDoc.append(dec->Encoding());
				sXmlDoc.append("\"");
			}

			if(dec->Standalone()[0] != 0)
			{
				sXmlDoc.append(" standalone=\"");
				sXmlDoc.append(dec->Standalone());
				sXmlDoc.append("\"");
			}

			sXmlDoc.append(" ?>\n");
			break;
		}

		xmlDecl = xmlDecl->NextSibling();
	}

	TiXmlElement *eleList = xmlDoc.RootElement();
	if(eleList)
	{
		sXmlDoc.append("<List");
		PrintXmlAttributes(*eleList, sXmlDoc);
		sXmlDoc.append(">\n");

		TiXmlElement *eleGroup = eleList->FirstChildElement();
		while(eleGroup)
		{
			sXmlDoc.append("  <Group");
			PrintXmlAttributes(*eleGroup, sXmlDoc);
			sXmlDoc.append(">\n");

			TiXmlElement *eleItem = eleGroup->FirstChildElement();

			while(eleItem)
			{
				sXmlDoc.append("    <Item");
				PrintXmlAttributes(*eleItem, sXmlDoc);
				sXmlDoc.append(" />\n");

				eleItem = eleItem->NextSiblingElement();
			}

			sXmlDoc.append("  </Group>\n");

			eleGroup = eleGroup->NextSiblingElement();
		}

		sXmlDoc.append("</List>");
	}

	strXmlDoc.Append(SFuns::S2WS(sXmlDoc));
}

int CalcEleCount(TiXmlDocument &xmlDoc)
{
	int cnt = 0;
	TiXmlElement *eleList = xmlDoc.RootElement();

	if(eleList)
	{
		TiXmlElement *eleGroup = eleList->FirstChildElement();

		while(eleGroup)
		{
			TiXmlElement *eleItem = eleGroup->FirstChildElement();
			while(eleItem)
			{
				cnt ++;

				eleItem = eleItem->NextSiblingElement();
			}

			eleGroup = eleGroup->NextSiblingElement();
		}
	}

	return cnt;
}

void GetGroupArray(TiXmlDocument &xmlDoc, wxArrayString &groupArray)
{
	if(xmlDoc.NoChildren())
		return;

	TiXmlElement *eleList = xmlDoc.RootElement();
	if(NULL == eleList)
		return;

	TiXmlElement *eleGroup = eleList->FirstChildElement();

	while(eleGroup)
	{
		groupArray.push_back(wxString(SFuns::S2WS(eleGroup->Attribute(ATTRIBUTE_DIRECTORY))));

		eleGroup = eleGroup->NextSiblingElement();
	}

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
 * ListMakerFrame constructors
 */

ListMakerFrame::ListMakerFrame()
{
    Init();
}

ListMakerFrame::ListMakerFrame( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create( parent, id, caption, pos, size, style );
}


/*
 * ListMakerFrame creator
 */

bool ListMakerFrame::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin ListMakerFrame creation
    wxFrame::Create( parent, id, caption, pos, size, style );

    CreateControls();
    Centre();
////@end ListMakerFrame creation

    return true;
}


/*
 * ListMakerFrame destructor
 */

ListMakerFrame::~ListMakerFrame()
{
////@begin ListMakerFrame destruction
////@end ListMakerFrame destruction
}


/*
 * Member initialisation
 */

void ListMakerFrame::Init()
{
    m_txtXML = NULL;
    m_statusBar = NULL;
	m_pWxThreadObj = NULL;
	m_bBuilding = false;
	m_bXmlTxtUpdate = false;
	m_bIsOpenFile = false;
	m_bIsCalcAll = false;
}


/*
 * Control creation for ListMakerFrame
 */

void ListMakerFrame::CreateControls()
{    
////@begin ListMakerFrame content construction
    // Generated by DialogBlocks, 18/11/2010 09:45:20 (unregistered)

    ListMakerFrame* itemFrame1 = this;

    wxMenuBar* menuBar = new wxMenuBar;
    wxMenu* itemMenu5 = new wxMenu;
    itemMenu5->Append(ID_MI_NEW, wxT("新建(&N)\tCtrl+N"), wxEmptyString, wxITEM_NORMAL);
    itemMenu5->Append(ID_MI_OPEN, wxT("打开(&O)\tCtrl+O"), wxEmptyString, wxITEM_NORMAL);
    itemMenu5->AppendSeparator();
    itemMenu5->Append(ID_MI_SAVE, wxT("保存(&S)\tCtrl+S"), wxEmptyString, wxITEM_NORMAL);
    itemMenu5->Append(ID_MI_SAVEAS, wxT("另存为(&A)\tCtrl+Shift+S"), wxEmptyString, wxITEM_NORMAL);
    itemMenu5->AppendSeparator();
    itemMenu5->Append(ID_MI_EXIT, wxT("退出(&E)\tCtrl+Q"), wxEmptyString, wxITEM_NORMAL);
    menuBar->Append(itemMenu5, wxT("文件(&F)"));
	wxMenu* itemMenumList = new wxMenu;
	itemMenumList->Append(ID_MI_SET_ROOT, wxT("设置根(&R)\tCtrl+R"), wxEmptyString, wxITEM_NORMAL);
	itemMenumList->AppendSeparator();
	itemMenumList->Append(ID_MI_ADD_GROUP, wxT("增加组(&G)\tCtrl+G"), wxEmptyString, wxITEM_NORMAL);
	itemMenumList->Append(ID_MI_ADD_ITEM, wxT("增加项(&I)\tCtrl+F"), wxEmptyString, wxITEM_NORMAL);
	itemMenumList->AppendSeparator();
	itemMenumList->Append(ID_MI_CALC_NONE, wxT("计算未计算的(&I)\tCtrl+B"), wxEmptyString, wxITEM_NORMAL);
	itemMenumList->Append(ID_MI_CALC_ALL, wxT("全部重新计算(&I)\tCtrl+Shift+B"), wxEmptyString, wxITEM_NORMAL);
	itemMenumList->AppendSeparator();
	itemMenumList->Append(ID_MI_BUILD_LIST, wxT("生成列表(&B)\tCtrl+D"), wxEmptyString, wxITEM_NORMAL);
	menuBar->Append(itemMenumList, wxT("列表(&L)"));
    /*wxMenu* itemMenu13 = new wxMenu;
    itemMenu13->Append(ID_MI_SETDIT, wxGetTranslation(wxString() + (wxChar) 0x76EE + (wxChar) 0x5F55 + (wxChar) 0x8BBE + (wxChar) 0x7F6E + wxT("(&D)")), wxEmptyString, wxITEM_NORMAL);
    itemMenu13->AppendSeparator();
    itemMenu13->Append(ID_MI_ADDFILE, wxGetTranslation(wxString() + (wxChar) 0x589E + (wxChar) 0x52A0 + (wxChar) 0x6587 + (wxChar) 0x4EF6 + wxT("(&A)")), wxEmptyString, wxITEM_NORMAL);
    itemMenu13->AppendSeparator();
    itemMenu13->Append(ID_MI_BUILD, wxGetTranslation(wxString() + (wxChar) 0x8FD0 + (wxChar) 0x7B97 + wxT("(&C)")), wxEmptyString, wxITEM_NORMAL);
    menuBar->Append(itemMenu13, wxGetTranslation(wxString() + (wxChar) 0x751F + (wxChar) 0x6210 + wxT("(&B)")));*/
    wxMenu* itemMenu19 = new wxMenu;
    itemMenu19->Append(ID_MI_HELP, wxT("主题(&M)\tF1"), wxEmptyString, wxITEM_NORMAL);
    itemMenu19->AppendSeparator();
    itemMenu19->Append(ID_MI_ABOUT, wxT("关于(&A)"), wxEmptyString, wxITEM_NORMAL);
    menuBar->Append(itemMenu19, wxT("帮助(&H)"));
    itemFrame1->SetMenuBar(menuBar);

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemFrame1->SetSizer(itemBoxSizer2);

    m_txtXML = new wxTextCtrl( itemFrame1, ID_TEXTCTRL, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE|wxTE_RICH|wxHSCROLL );
    itemBoxSizer2->Add(m_txtXML, 1, wxGROW|wxALL, 0);

    m_statusBar = new wxStatusBar( itemFrame1, ID_STATUSBAR, wxST_SIZEGRIP|wxNO_BORDER );
    m_statusBar->SetFieldsCount(4);
    int m_statusBarWidths[4];
    m_statusBarWidths[0] = 40;
    m_statusBarWidths[1] = -1;
    m_statusBarWidths[2] = -1;
	m_statusBarWidths[3] = 200;
    m_statusBar->SetStatusWidths(4, m_statusBarWidths);
    itemFrame1->SetStatusBar(m_statusBar);

////@end ListMakerFrame content construction
}


/*
 * Should we show tooltips?
 */

bool ListMakerFrame::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap ListMakerFrame::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin ListMakerFrame bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end ListMakerFrame bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon ListMakerFrame::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin ListMakerFrame icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end ListMakerFrame icon retrieval
}


/*
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MI_NEW
 */

void ListMakerFrame::OnMiNewClick( wxCommandEvent& event )
{
	if(IsDoingBuild())
		return;

	if(wxCANCEL == SaveChange())
		return;

	m_bIsOpenFile = true;
	m_txtXML->SetValue(wxT(""));
	m_statusBar->SetStatusText(wxT(""), FILE_STATUS_FIELD);
	m_statusBar->SetStatusText(wxT(""), PATH_STATUS_FIELD);

    //event.Skip();
}


void ListMakerFrame::OpenAFile(wxString &fpath)
{
	FILE *pf = fopen(fpath.char_str(), "r");
	if(NULL == pf)
	{
		wxMessageBox(wxT("读文件错误"), wxT("错误"), wxICON_ERROR|wxOK|wxCENTER, this);
		return;
	}

	std::string rbuf;
	const int msize = 1024*8+1;
	char buf[msize];

	while(!feof(pf))
	{
		size_t rsize = fread(buf,1,msize-1,pf);
		buf[rsize] = 0;
		rbuf.append(buf);
	}

	std::wstring wrbuf = SFuns::S2WS(rbuf);

	if(wrbuf.size())
	{
		m_bIsOpenFile = true;
		m_txtXML->SetValue(wxString(wrbuf.c_str()));

		TiXmlDocument xmlDoc;
		xmlDoc.Parse(rbuf.c_str());

		TiXmlElement *eleList = xmlDoc.RootElement();
		if(eleList)
		{
			m_statusBar->SetStatusText(wxString(SFuns::S2WS(eleList->Attribute(ATTRIBUTE_DIRECTORY))), PATH_STATUS_FIELD);
		}
	}
	m_statusBar->SetStatusText(fpath, FILE_STATUS_FIELD);

}
/*
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MI_OPEN
 */

void ListMakerFrame::OnMiOpenClick( wxCommandEvent& event )
{
	if(IsDoingBuild())
		return;

	if(wxCANCEL == SaveChange())
		return;

	wxString caption = wxT("");
	wxString wildcard = wxT("List maker project files(*.lmp)|*.lmp");
	wxString defaultDir = wxT("");
	wxString defaultFilename = wxEmptyString;

	wxFileDialog dialog(this, caption, defaultDir, defaultFilename, wildcard, wxOPEN|wxFD_FILE_MUST_EXIST);

	if(wxID_OK == dialog.ShowModal())
	{
		OpenAFile(dialog.GetPath());
	}

    //event.Skip();
}

bool ListMakerFrame::SaveToFile(wxString &strXmlDoc, wxString &file)
{
	FILE *pf = fopen(file.char_str(), "w");
	if(NULL == pf)
	{
		wxMessageBox(wxT("打开文件错误！"), wxT("错误"), wxICON_ERROR|wxOK|wxCENTER, this);
		return false;
	}

	wxWritableCharBuffer wbuf = strXmlDoc.char_str();
	size_t n = strlen(wbuf.data());
	fwrite(wbuf.data(), 1, n, pf);

	fflush(pf);
	fclose(pf);

	return true;
}

bool ListMakerFrame::SaveFile(wxString &file)
{
	if(false == SaveToFile(m_txtXML->GetValue(), file))
		return false;

	m_bXmlTxtUpdate = false;

	return true;
}

/*
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MI_SAVE
 */

void ListMakerFrame::OnMiSaveClick( wxCommandEvent& event )
{
	if(IsDoingBuild())
		return;

	wxString sfile = m_statusBar->GetStatusText(FILE_STATUS_FIELD);

	if(wxT("") == sfile)
		OnMiSaveasClick(event);
	else
		SaveFile(sfile);

    //event.Skip();
}


/*
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MI_SAVEAS
 */

void ListMakerFrame::OnMiSaveasClick( wxCommandEvent& event )
{
	if(IsDoingBuild())
		return;

	wxString caption = wxT("");
	wxString wildcard = wxT("List maker project files(*.lmp)|*.lmp");
	wxString defaultDir = wxT("");
	wxString defaultFilename = wxEmptyString;

	wxFileDialog dialog(this, caption, defaultDir, defaultFilename, wildcard, wxSAVE);

	if(wxID_OK == dialog.ShowModal())
	{
		wxString path = dialog.GetPath();

		if(SaveFile(path))
		{
			m_statusBar->SetStatusText(path, FILE_STATUS_FIELD);
		}
	}

    //event.Skip();
}


/*
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MI_EXIT
 */

void ListMakerFrame::OnMiExitClick( wxCommandEvent& event )
{
	this->Close();

    //event.Skip();
}


/*
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MI_SETDIT
 */

void ListMakerFrame::OnMiSetditClick( wxCommandEvent& event )
{
	if(IsDoingBuild())
		return;

	wxString defaultPath = wxT("");

	wxDirDialog dialog(this, wxT(""),defaultPath,wxDD_NEW_DIR_BUTTON);

	if(wxID_OK == dialog.ShowModal())
	{
		m_statusBar->SetStatusText(dialog.GetPath(), PATH_STATUS_FIELD);
	}

    //event.Skip();
}

void ListMakerFrame::AddFiles(wxArrayString &files, wxString &path)
{
	TiXmlDocument xmlDoc;

	xmlDoc.Parse(m_txtXML->GetValue().char_str());

	CheckDeclaration(xmlDoc);
	CheckRootElement(xmlDoc);

	TiXmlElement *eleList = xmlDoc.RootElement();
	TiXmlElement *eleGroup = eleList->FirstChildElement();

	while(eleGroup)
	{
		const char *dir = eleGroup->Attribute(ATTRIBUTE_DIRECTORY);

		if(0 == strcmp(dir, path.char_str()))
			break;

		eleGroup = eleGroup->NextSiblingElement();
	}

	if(NULL == eleGroup)
	{
		eleGroup = new TiXmlElement(ELEMENT_GROUP);
		eleGroup->SetAttribute(ATTRIBUTE_DIRECTORY, path.char_str());
		eleGroup->SetAttribute(ATTRIBUTE_TYPE, "GROUP_TYPE_DIR");
		eleList->LinkEndChild(eleGroup);
	}

	for(size_t i = 0; i < files.size(); i ++)
	{
		TiXmlElement *eleItem = new TiXmlElement(ELEMENT_ITEM);
		int np = files[i].Find(wxT("\""));
		wxString file = files[i].Mid(0, np);
		wxString path = files[i].Mid(np + 1);
		eleItem->SetAttribute(ATTRIBUTE_FILE, file.char_str());
		eleItem->SetAttribute(ATTRIBUTE_PATH, path.char_str());
		eleItem->SetAttribute(ATTRIBUTE_CODE, "");
		eleGroup->LinkEndChild(eleItem);
	}

	wxString strXml;

	PrintXmlDoc(xmlDoc, strXml);
	FormatXmlDoc(strXml);

	m_txtXML->SetValue(strXml);

}

/*
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MI_ADDFILE
 */

void ListMakerFrame::OnMiAddfileClick( wxCommandEvent& event )
{
	if(IsDoingBuild())
		return;

	wxString caption = wxT("");
	wxString wildcard = wxT("All files(*.*)|*.*");
	wxString defaultDir = m_statusBar->GetStatusText(PATH_STATUS_FIELD);
	wxString defaultFilename = wxEmptyString;

	wxFileDialog dialog(this, caption, defaultDir, defaultFilename, wildcard, wxOPEN|wxFD_MULTIPLE|wxFD_FILE_MUST_EXIST);

	if(wxID_OK == dialog.ShowModal())
	{
		wxArrayString names;
		dialog.GetFilenames(names);

		AddFiles(names, m_statusBar->GetStatusText(PATH_STATUS_FIELD));
	}

    //event.Skip();
}


/*
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MI_BUILD
 */

void ListMakerFrame::OnMiBuildClick( wxCommandEvent& event )
{
	StartCalc(true);

    //event.Skip();
}


/*
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MI_HELP
 */

void ListMakerFrame::OnMiHelpClick( wxCommandEvent& event )
{
	ShellExecuteA(NULL, NULL, m_helpFile.char_str(), NULL, NULL, SW_SHOW);

    //event.Skip();
}


/*
 * wxEVT_COMMAND_MENU_SELECTED event handler for ID_MI_ABOUT
 */

void ListMakerFrame::OnMiAboutClick( wxCommandEvent& event )
{
	wxMessageBox(wxT("Production: UpdateListMaker.\nVersion: 1.0.0.0.\nAuthor: XJ.35.com"), wxT("About"), wxICON_INFORMATION|wxOK|wxCENTER, this);

    //event.Skip();
}

/*
* wxEVT_COMMAND_TEXT_UPDATED event handler for ID_TEXTCTRL
*/

void ListMakerFrame::OnTextctrlTextUpdated( wxCommandEvent& event )
{
	if(m_bIsOpenFile)
		m_bIsOpenFile = false;
	else
		m_bXmlTxtUpdate = true;

	event.Skip();
}

void ListMakerFrame::ThreadPro( void *pv )
{
	TiXmlDocument xmlDoc;

	xmlDoc.Parse(m_txtXML->GetValue().char_str());

	if(false == xmlDoc.NoChildren())
	{
		TiXmlElement *eleList = xmlDoc.RootElement();
		if(eleList)
		{
			int calced = 0, total = CalcEleCount(xmlDoc);

			//有运算项
			if(total)
			{
				m_statusBar->SetStatusText(wxString::Format(wxT("%d/%d %d%%"), calced, total, (100 * calced) / total), RATE_STATUS_FIELD);

				MD5Calculator md5Clc;
				md5Clc.StartUp();
				char md5Code[33];

				TiXmlElement *eleGroup = eleList->FirstChildElement();
				while(eleGroup)
				{
					TiXmlElement *eleItem = eleGroup->FirstChildElement();
					while(eleItem)
					{
						bool calc = true;
						if(false == m_bIsCalcAll)
						{
							if(0 != strlen(eleItem->Attribute(ATTRIBUTE_CODE)))
								calc = false;
						}

						if(calc)
						{
							md5Code[0] = 0;

							md5Clc.Begin();
							md5Clc.Calculate(eleItem->Attribute(ATTRIBUTE_PATH));
							md5Clc.GetResult(md5Code, 33);
							md5Clc.End();

							eleItem->SetAttribute(ATTRIBUTE_CODE, md5Code);
						}

						eleItem = eleItem->NextSiblingElement();

						calced ++;
						m_statusBar->SetStatusText(wxString::Format(wxT("%d/%d %d%%"), calced, total, (100 * calced) / total), RATE_STATUS_FIELD);
					}

					eleGroup = eleGroup->NextSiblingElement();
				}

				md5Clc.Dispose();

				m_statusBar->SetStatusText(wxT("更新中。。。"), RATE_STATUS_FIELD);

				wxString strXml;

				PrintXmlDoc(xmlDoc, strXml);
				FormatXmlDoc(strXml);

				m_txtXML->SetValue(strXml);

				m_statusBar->SetStatusText(wxT("完成"), RATE_STATUS_FIELD);

				//show successed message?
				wxMessageBox(wxT("运算完成！"), wxT("信息"), wxICON_INFORMATION|wxOK|wxCENTER, this);
			}
		}
	}

	m_bBuilding = false;
}


/*
 * wxEVT_CLOSE_WINDOW event handler for ID_LISTMAKERFRAME
 */

void ListMakerFrame::OnCloseWindow( wxCloseEvent& event )
{
	if(wxCANCEL == SaveChange())
		return;

    event.Skip();
}

int ListMakerFrame::SaveChange()
{
	if(false == m_bXmlTxtUpdate)
		return 0;

	int rtn = wxMessageBox(wxT("要在退出前保存吗？"), wxT("提示"), wxICON_QUESTION|wxYES_NO|wxCANCEL|wxCENTER, this);

	if(wxYES == rtn)
		SaveFile(m_statusBar->GetStatusText(FILE_STATUS_FIELD));

	if(wxCANCEL != rtn)
		m_bXmlTxtUpdate = false;

	return rtn;
}

bool ListMakerFrame::IsDoingBuild()
{
	if(false == m_bBuilding)
		return false;

	wxMessageBox(wxT("正在运算！"), wxT("信息"), wxICON_INFORMATION|wxOK|wxCENTER, this);

	return true;
}

void ListMakerFrame::OnMiSetRootClick( wxCommandEvent& event )
{
	if(IsDoingBuild())
		return;

	SetRootDlg dlg;
	dlg.Create(this);
	dlg.m_txtDir->SetValue(m_statusBar->GetStatusText(PATH_STATUS_FIELD));
	if(wxID_CANCEL == dlg.ShowModal())
		return;

	wxString strXmlDoc;
	TiXmlDocument xmlDoc;

	xmlDoc.Parse(m_txtXML->GetValue().char_str());
	CheckDeclaration(xmlDoc);
	CheckRootElement(xmlDoc);
	xmlDoc.RootElement()->SetAttribute(ATTRIBUTE_DIRECTORY, dlg.m_txtDir->GetValue().char_str());
	PrintXmlDoc(xmlDoc, strXmlDoc);
	FormatXmlDoc(strXmlDoc);

	m_txtXML->SetValue(strXmlDoc);
	m_statusBar->SetStatusText(dlg.m_txtDir->GetValue(), PATH_STATUS_FIELD);

}

void ListMakerFrame::OnMiAddGroupClick( wxCommandEvent& event )
{
	if(IsDoingBuild())
		return;

	AddGroupDlg dlg;
	dlg.Create(this);
	if(wxID_CANCEL == dlg.ShowModal())
		return;

	wxString strXmlDoc;
	TiXmlDocument xmlDoc;

	xmlDoc.Parse(m_txtXML->GetValue().char_str());
	CheckDeclaration(xmlDoc);
	CheckRootElement(xmlDoc);

	wxString sgd = dlg.m_txtDir->GetValue();
	sgd.Replace(wxT("\\"), wxT("/"));
	if(sgd != wxT(""))
	{
		if(sgd.GetChar(sgd.size() - 1) != wxT('/'))
			sgd.Append(wxT('/'));
	}

	wxWritableCharBuffer strGropDir = sgd.char_str();
	wxWritableCharBuffer strGropType = dlg.m_pCmbType->GetStringSelection().char_str();

	TiXmlElement *eleList = xmlDoc.RootElement();
	TiXmlElement *eleGroup = eleList->FirstChildElement();

	while(eleGroup)
	{
		if(0 == strcmp(strGropDir, eleGroup->Attribute(ATTRIBUTE_DIRECTORY)))
		{
			wxMessageBox(wxString::Format(wxT("组[%s]已经存在！"), sgd), wxT("错误"), wxICON_ERROR|wxOK|wxCENTER, this);
			return;
		}

		eleGroup = eleGroup->NextSiblingElement();
	}

	eleGroup = new TiXmlElement(ELEMENT_GROUP);
	eleGroup->SetAttribute(ATTRIBUTE_DIRECTORY, strGropDir);
	eleGroup->SetAttribute(ATTRIBUTE_TYPE, strGropType);
	eleList->LinkEndChild(eleGroup);

	PrintXmlDoc(xmlDoc, strXmlDoc);
	FormatXmlDoc(strXmlDoc);

	m_txtXML->SetValue(strXmlDoc);

}

void ListMakerFrame::OnMiAddItemClick( wxCommandEvent& event )
{
	if(IsDoingBuild())
		return;

	TiXmlDocument xmlDoc;
	xmlDoc.Parse(m_txtXML->GetValue().char_str());
	wxArrayString groups;
	GetGroupArray(xmlDoc, groups);
	if(0 == groups.size())
	{
		wxMessageBox(wxT("工程中没有任何组，请先至少创建一个组！"), wxT("错误"), wxICON_ERROR|wxOK|wxCENTER, this);
		return;
	}

	AddItemDlg dlg;
	dlg.Create(this);

	for(wxArrayString::iterator itr = groups.begin(); itr != groups.end(); ++itr)
	{
		dlg.m_cmbGroup->Append(*itr);
	}
	dlg.m_cmbGroup->SetSelection(0);

	if(wxID_CANCEL == dlg.ShowModal())
		return;

	wxString strDir = dlg.m_cmbGroup->GetValue();
	wxString strItems = dlg.m_txtItems->GetValue();
	wxArrayString items;

	while(1)
	{
		int np = strItems.Find(wxT("\n"));
		
		if(-1 == np)
			break;

		wxString strItem = strItems.Mid(0, np);

		items.push_back(strItem);

		strItems.Remove(0, np + 1);
	}

	AddFiles(items, strDir);

}

void ListMakerFrame::OnMiCalcNoneClick( wxCommandEvent& event )
{
	StartCalc(false);

}

void ListMakerFrame::OnMiCalcAllClick( wxCommandEvent& event )
{
	StartCalc(true);

}

void ListMakerFrame::OnMiBuildListClick( wxCommandEvent& event )
{
	if(IsDoingBuild())
		return;

	wxString caption = wxT("");
	wxString wildcard = wxT("XML files(*.xml)|*.xml|All files(*.*)|*.*");
	wxString defaultDir = wxT("");
	wxString defaultFilename = wxEmptyString;

	wxFileDialog dialog(this, caption, defaultDir, defaultFilename, wildcard, wxSAVE);

	if(wxID_OK != dialog.ShowModal())
		return;

	TiXmlDocument xmlDoc;
	xmlDoc.Parse(m_txtXML->GetValue().char_str());
	if(xmlDoc.NoChildren())
		return;

	TiXmlElement *eleList = xmlDoc.RootElement();
	if(NULL == eleList)
		return;

	TiXmlElement *eleGroup = eleList->FirstChildElement();
	while(eleGroup)
	{
		TiXmlElement *eleItem = eleGroup->FirstChildElement();

		while(eleItem)
		{
			eleItem->RemoveAttribute(ATTRIBUTE_PATH);

			eleItem = eleItem->NextSiblingElement();
		}

		eleGroup = eleGroup->NextSiblingElement();
	}

	wxString strXmlDoc;
	PrintXmlDoc(xmlDoc, strXmlDoc);
	FormatXmlDoc(strXmlDoc);
	
	if(SaveToFile(strXmlDoc, dialog.GetPath()))
		wxMessageBox(wxT("成功创建列表文件！"), wxT("信息"), wxICON_INFORMATION|wxOK|wxCENTER, this);
	else
		wxMessageBox(wxT("创建列表文件失败，请检查是否有非法字符或错误语法！"), wxT("错误"), wxICON_ERROR|wxOK|wxCENTER, this);

}

void ListMakerFrame::StartCalc( bool all )
{
	if(IsDoingBuild())
		return;

	m_pWxThreadObj = new WxThreadCls(this, 0);

	if(m_pWxThreadObj)
	{
		m_bBuilding = true;
		m_bIsCalcAll = all;
		m_pWxThreadObj->Create();
		m_pWxThreadObj->Run();
	}
}

void ListMakerFrame::SetHelpFile( wxString &file )
{
	m_helpFile = file;

}