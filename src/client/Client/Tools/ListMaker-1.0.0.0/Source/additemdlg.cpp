/////////////////////////////////////////////////////////////////////////////
// Name:        additemdlg.cpp
// Purpose:     
// Author:      xj
// Modified by: 
// Created:     19/11/2010 14:32:47
// RCS-ID:      
// Copyright:   XJ-1
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 19/11/2010 14:32:47

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"
#include "wx/filedlg.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "additemdlg.h"
#include "SFuns.h"

////@begin XPM images
////@end XPM images


/*
 * AddItemDlg type definition
 */

IMPLEMENT_DYNAMIC_CLASS( AddItemDlg, wxDialog )


/*
 * AddItemDlg event table definition
 */

BEGIN_EVENT_TABLE( AddItemDlg, wxDialog )

////@begin AddItemDlg event table entries
	EVT_BUTTON( ID_BTN_BDIR, AddItemDlg::OnBtnBdirClick )

	EVT_BUTTON( ID_BTN_ADDDIR, AddItemDlg::OnBtnAddDirClick )

    EVT_BUTTON( ID_BTN_BROWSER, AddItemDlg::OnBtnBrowserClick )

    EVT_BUTTON( ID_BTN_OK, AddItemDlg::OnBtnOkClick )

    EVT_BUTTON( ID_BTN_CANCEL, AddItemDlg::OnBtnCancelClick )

////@end AddItemDlg event table entries

END_EVENT_TABLE()


/*
 * AddItemDlg constructors
 */

AddItemDlg::AddItemDlg()
{
    Init();
}

AddItemDlg::AddItemDlg( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * AddItemDlg creator
 */

bool AddItemDlg::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin AddItemDlg creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end AddItemDlg creation
    return true;
}


/*
 * AddItemDlg destructor
 */

AddItemDlg::~AddItemDlg()
{
	m_itemFilter.Dispose();
}


/*
 * Member initialisation
 */

void AddItemDlg::Init()
{
    m_cmbGroup = NULL;
    m_txtPrefix = NULL;
    m_txtItems = NULL;

	m_itemFilter.LoadFilterW();
}


/*
 * Control creation for AddItemDlg
 */

void AddItemDlg::CreateControls()
{    
////@begin AddItemDlg content construction
    // Generated by DialogBlocks, 19/11/2010 14:54:29 (unregistered)

    AddItemDlg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxStaticBox* itemStaticBoxSizer3Static = new wxStaticBox(itemDialog1, wxID_ANY, wxGetTranslation(wxString() + (wxChar) 0x9009 + (wxChar) 0x62E9 + (wxChar) 0x7EC4));
    wxStaticBoxSizer* itemStaticBoxSizer3 = new wxStaticBoxSizer(itemStaticBoxSizer3Static, wxHORIZONTAL);
    itemBoxSizer2->Add(itemStaticBoxSizer3, 0, wxGROW|wxALL, 5);

    wxArrayString m_cmbGroupStrings;
    m_cmbGroup = new wxComboBox( itemDialog1, ID_CMB_GROUP, wxEmptyString, wxDefaultPosition, wxSize(400, -1), m_cmbGroupStrings, wxCB_DROPDOWN );
    itemStaticBoxSizer3->Add(m_cmbGroup, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer5Static = new wxStaticBox(itemDialog1, wxID_ANY, wxT("子目录"));
    wxStaticBoxSizer* itemStaticBoxSizer5 = new wxStaticBoxSizer(itemStaticBoxSizer5Static, wxHORIZONTAL);
    itemBoxSizer2->Add(itemStaticBoxSizer5, 0, wxGROW|wxALL, 5);

    m_txtPrefix = new wxTextCtrl( itemDialog1, ID_TXT_PREFIX, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemStaticBoxSizer5->Add(m_txtPrefix, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

	wxButton* itemButton7 = new wxButton( itemDialog1, ID_BTN_BDIR, wxT("浏览"), wxDefaultPosition, wxDefaultSize, 0 );
	itemStaticBoxSizer5->Add(itemButton7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_txtItems = new wxTextCtrl( itemDialog1, ID_TXT_ITEMS, wxEmptyString, wxDefaultPosition, wxSize(-1, 300), wxTE_MULTILINE|wxTE_RICH|wxHSCROLL );
    itemBoxSizer2->Add(m_txtItems, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer8 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer8, 0, wxALIGN_RIGHT|wxALL, 5);

	wxButton* itemButton12 = new wxButton( itemDialog1, ID_BTN_ADDDIR, wxT("加目录"), wxDefaultPosition, wxDefaultSize, 0 );
	itemBoxSizer8->Add(itemButton12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton9 = new wxButton( itemDialog1, ID_BTN_BROWSER, wxT("加文件"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer8->Add(itemButton9, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton10 = new wxButton( itemDialog1, ID_BTN_OK, wxGetTranslation(wxString() + (wxChar) 0x786E + (wxChar) 0x5B9A), wxDefaultPosition, wxDefaultSize, 0 );
	itemButton10->SetDefault();
    itemBoxSizer8->Add(itemButton10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton11 = new wxButton( itemDialog1, ID_BTN_CANCEL, wxGetTranslation(wxString() + (wxChar) 0x53D6 + (wxChar) 0x6D88), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer8->Add(itemButton11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end AddItemDlg content construction
}


/*
 * Should we show tooltips?
 */

bool AddItemDlg::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap AddItemDlg::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin AddItemDlg bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end AddItemDlg bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon AddItemDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin AddItemDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end AddItemDlg icon retrieval
}

void AddItemDlg::AddDir(wxString &root, wxString &dir, wxString &items)
{
	_WIN32_FIND_DATAW fData;
	HANDLE hSearch;
	BOOL bFinished = FALSE;

	wxString temp = wxString::Format(wxT("%s*.*"), dir);

	hSearch = FindFirstFileW(temp.c_str(), &fData);

	if(INVALID_HANDLE_VALUE == hSearch)
		bFinished = TRUE;

	while(FALSE == bFinished)
	{
		if(0 != lstrcmp(fData.cFileName, L".") && 0 != lstrcmp(fData.cFileName, L".."))
		{
			if(fData.dwFileAttributes &  FILE_ATTRIBUTE_DIRECTORY)
			{
				if(false == m_itemFilter.FilterDirW(fData.cFileName))
				{
					temp = wxString::Format(wxT("%s%s/"), dir, fData.cFileName);
					AddDir(wxString::Format(wxT("%s%s/"), root, fData.cFileName), temp, items);
				}
			}
			else
			{
				if(false == m_itemFilter.FilterFileW(fData.cFileName))//过滤
				{
					temp = wxString::Format(wxT("%s%s\"%s%s\n"), root, fData.cFileName, dir, fData.cFileName);
					items.Append(temp);
				}
			}
		}

		if(FALSE == FindNextFile(hSearch, &fData))
			bFinished = TRUE;
	}

	FindClose(hSearch);

}

void AddItemDlg::OnBtnAddDirClick( wxCommandEvent& event )
{
	static wxString defaultPath = wxT("");

	wxDirDialog dialog(this, wxT(""),defaultPath,wxDD_NEW_DIR_BUTTON);

	if(wxID_OK == dialog.ShowModal())
	{
		wxString selPath = dialog.GetPath();

		defaultPath = selPath;

		wxString strItems = m_txtItems->GetValue();
		wxString strPrefix = m_txtPrefix->GetValue();
		strPrefix.Trim();

		selPath.Append(wxT("/"));
		selPath.Replace(wxT("\\"), wxT("/"));

		strItems.reserve(1024*1024);

		AddDir(strPrefix, selPath, strItems);

		m_txtItems->SetValue(strItems);

	}

	event.Skip();

}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTN_BROWSER
 */

void AddItemDlg::OnBtnBrowserClick( wxCommandEvent& event )
{
	wxString caption = wxT("");
	wxString wildcard = wxT("All files(*.*)|*.*");
	static wxString defaultDir = wxT("");
	wxString defaultFilename = wxEmptyString;

	wxFileDialog dialog(this, caption, defaultDir, defaultFilename, wildcard, wxOPEN|wxFD_MULTIPLE|wxFD_FILE_MUST_EXIST);

	if(wxID_OK == dialog.ShowModal())
	{
		defaultDir = dialog.GetPath();

		wxArrayString names;
		dialog.GetFilenames(names);
		wxArrayString paths;
		dialog.GetPaths(paths);

		wxString strItems = m_txtItems->GetValue();
		wxString strPrefix = m_txtPrefix->GetValue();
		strPrefix.Trim();

		int i = 0;

		for(wxArrayString::iterator itr = names.begin(); itr != names.end(); ++itr)
		{
			if(false == m_itemFilter.FilterFileW(*itr))//过滤
			{
				strItems.Append(strPrefix);
				strItems.Append(*itr);
				strItems.Append(wxT("\""));
				strItems.Append(paths[i ++]);
				strItems.Append(wxT("\n"));
			}
		}

		strItems.Replace(wxT("\\"), wxT("/"));
		m_txtItems->SetValue(strItems);
	}

    event.Skip();
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTN_OK
 */

void AddItemDlg::OnBtnOkClick( wxCommandEvent& event )
{
	EndModal(wxID_OK);

    event.Skip();
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BTN_CANCEL
 */

void AddItemDlg::OnBtnCancelClick( wxCommandEvent& event )
{
	EndModal(wxID_CANCEL);

    event.Skip();
}

void AddItemDlg::OnBtnBdirClick( wxCommandEvent& event )
{
	static wxString defaultPath = wxT("");

	wxDirDialog dialog(this, wxT(""),defaultPath,wxDD_NEW_DIR_BUTTON);

	if(wxID_OK == dialog.ShowModal())
	{
		wxString selPath = dialog.GetPath();

		defaultPath = selPath;

		selPath.Replace(wxT("\\"), wxT("/"));

		wxString selGroup = m_cmbGroup->GetValue();
		int p = selGroup.Last(wxT('/'));
		if(-1 != p && p != selGroup.size() - 1)
			selGroup.Remove(p + 1);
		p = selPath.Find(selGroup);
		if(-1 == p)
			p = selPath.Last(wxT('\\'));
		else
			p += selGroup.size() - 1;
		if(p >= 0)
			selPath.Remove(0, p + 1);
		selPath.Append(wxT("/"));

		m_txtPrefix->SetValue(selPath);
	}

	event.Skip();
}
