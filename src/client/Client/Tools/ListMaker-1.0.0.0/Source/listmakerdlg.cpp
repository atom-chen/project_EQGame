/////////////////////////////////////////////////////////////////////////////
// Name:        listmakerdlg.cpp
// Purpose:     
// Author:      xj
// Modified by: 
// Created:     16/11/2010 14:20:13
// RCS-ID:      
// Copyright:   XJ-1
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 16/11/2010 14:20:13

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"
#include "wx/dirdlg.h"
#include "wx/filedlg.h"
#include "tinyxml.h"
#include "wx/textfile.h"

#include "SFuns.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "listmakerdlg.h"

////@begin XPM images
////@end XPM images


/*
 * ListMakerDlg type definition
 */

IMPLEMENT_DYNAMIC_CLASS( ListMakerDlg, wxDialog )


/*
 * ListMakerDlg event table definition
 */

BEGIN_EVENT_TABLE( ListMakerDlg, wxDialog )

////@begin ListMakerDlg event table entries
    EVT_BUTTON( ID_BROWSER, ListMakerDlg::OnBrowserClick )

    EVT_BUTTON( ID_ADD, ListMakerDlg::OnAddClick )

    EVT_BUTTON( ID_OPEN, ListMakerDlg::OnOpenClick )

    EVT_BUTTON( ID_BUILD, ListMakerDlg::OnBuildClick )

    EVT_BUTTON( ID_SAVE, ListMakerDlg::OnSaveClick )

////@end ListMakerDlg event table entries

END_EVENT_TABLE()


/*
 * ListMakerDlg constructors
 */

ListMakerDlg::ListMakerDlg()
{
    Init();
}

ListMakerDlg::ListMakerDlg( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*
 * ListMakerDlg creator
 */

bool ListMakerDlg::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin ListMakerDlg creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end ListMakerDlg creation
    return true;
}


/*
 * ListMakerDlg destructor
 */

ListMakerDlg::~ListMakerDlg()
{
////@begin ListMakerDlg destruction
////@end ListMakerDlg destruction
}


/*
 * Member initialisation
 */

void ListMakerDlg::Init()
{
////@begin ListMakerDlg member initialisation
    m_txtXml = NULL;
    m_txtDir = NULL;
    m_labelFile = NULL;
////@end ListMakerDlg member initialisation
}


/*
 * Control creation for ListMakerDlg
 */

void ListMakerDlg::CreateControls()
{    
////@begin ListMakerDlg content construction
    // Generated by DialogBlocks, 17/11/2010 14:35:42 (unregistered)

    ListMakerDlg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    m_txtXml = new wxTextCtrl( itemDialog1, ID_TXT_XML, _("<?xml version=\"1.0\" ?>\n<List>\n</List>"), wxDefaultPosition, wxSize(480, 300), wxTE_MULTILINE );
    itemBoxSizer2->Add(m_txtXml, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer4, 0, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText5 = new wxStaticText( itemDialog1, wxID_STATIC, wxGetTranslation(wxString() + (wxChar) 0x76EE + (wxChar) 0x5F55 + (wxChar) 0xFF1A), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(itemStaticText5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_txtDir = new wxTextCtrl( itemDialog1, ID_TXT_DIR, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer4->Add(m_txtDir, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton7 = new wxButton( itemDialog1, ID_BROWSER, wxGetTranslation(wxString() + (wxChar) 0x6D4F + (wxChar) 0x89C8 + wxT("...")), wxDefaultPosition, wxSize(60, -1), 0 );
    itemBoxSizer4->Add(itemButton7, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer8 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer8, 0, wxGROW|wxALL, 5);

    m_labelFile = new wxStaticText( itemDialog1, ID_LABEL_MSG, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer8->Add(m_labelFile, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton10 = new wxButton( itemDialog1, ID_ADD, wxGetTranslation(wxString() + (wxChar) 0x589E + (wxChar) 0x52A0), wxDefaultPosition, wxSize(60, -1), 0 );
    itemBoxSizer8->Add(itemButton10, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton11 = new wxButton( itemDialog1, ID_OPEN, wxGetTranslation(wxString() + (wxChar) 0x6253 + (wxChar) 0x5F00), wxDefaultPosition, wxSize(60, -1), 0 );
    itemBoxSizer8->Add(itemButton11, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton12 = new wxButton( itemDialog1, ID_BUILD, wxGetTranslation(wxString() + (wxChar) 0x751F + (wxChar) 0x6210), wxDefaultPosition, wxSize(60, -1), 0 );
    itemBoxSizer8->Add(itemButton12, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton13 = new wxButton( itemDialog1, ID_SAVE, wxGetTranslation(wxString() + (wxChar) 0x4FDD + (wxChar) 0x5B58), wxDefaultPosition, wxSize(60, -1), 0 );
    itemBoxSizer8->Add(itemButton13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxGauge* itemGauge14 = new wxGauge( itemDialog1, ID_GAUGE, 100, wxDefaultPosition, wxSize(-1, 12), wxGA_HORIZONTAL );
    itemGauge14->SetValue(1);
    itemGauge14->Show(false);
    itemBoxSizer2->Add(itemGauge14, 0, wxGROW|wxALL, 5);

////@end ListMakerDlg content construction
}


/*
 * Should we show tooltips?
 */

bool ListMakerDlg::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap ListMakerDlg::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin ListMakerDlg bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end ListMakerDlg bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon ListMakerDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin ListMakerDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end ListMakerDlg icon retrieval
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON
 */

void ListMakerDlg::OnBrowserClick( wxCommandEvent& event )
{
	wxString defaultPath = wxT("/");

	wxDirDialog dialog(this, wxT(""),defaultPath,wxDD_NEW_DIR_BUTTON);

	if(wxID_OK == dialog.ShowModal())
	{
		m_txtDir->SetValue(dialog.GetPath());
	}

    event.Skip();
}

void ListMakerDlg::AddFiles(wxArrayString &files, wxString &path)
{
	TiXmlDocument xmlDoc;

	xmlDoc.Parse(m_txtXml->GetValue().char_str());

	bool hasDecl = false;
	TiXmlNode *xmlDecl = xmlDoc.FirstChild();
	while(xmlDecl)
	{
		if(TiXmlNode::TINYXML_DECLARATION == xmlDecl->Type())
		{
			hasDecl = true;
			break;
		}

		xmlDecl = xmlDecl->NextSibling();
	}
	if(false == hasDecl)
	{
		TiXmlDeclaration xmlDecl("1.0", "", "");
		if(xmlDoc.NoChildren())
			xmlDoc.InsertEndChild(xmlDecl);
		else
			xmlDoc.InsertBeforeChild(xmlDoc.FirstChild(), xmlDecl);
	}

	TiXmlElement *eleList = xmlDoc.RootElement();
	if(NULL == eleList)
	{
		eleList = new TiXmlElement(ELEMENT_LIST);
		xmlDoc.LinkEndChild(eleList);
	}

	TiXmlElement *eleGroup = eleList->FirstChildElement();
	
	while(eleGroup)
	{
		const char *dir = eleGroup->Attribute(ATTRIBUTE_DIRECTORY);

		if(0 == strcmp(dir, path.char_str()))
			break;

		eleGroup = eleGroup->NextSiblingElement();
	}

	if(NULL == eleGroup)
	{
		eleGroup = new TiXmlElement(ELEMENT_GROUP);
		eleGroup->SetAttribute(ATTRIBUTE_DIRECTORY, path.char_str());
		eleList->LinkEndChild(eleGroup);
	}

	for(size_t i = 0; i < files.size(); i ++)
	{
		TiXmlElement *eleItem = new TiXmlElement(ELEMENT_ITEM);
		eleItem->SetAttribute(ATTRIBUTE_FILE, files[i].char_str());
		eleItem->SetAttribute(ATTRIBUTE_CODE, "");
		eleGroup->LinkEndChild(eleItem);
	}

	TiXmlPrinter xmlPrint;
	xmlPrint.SetStreamPrinting();
	xmlDoc.Accept(&xmlPrint);

	wxString strXml(SFuns::S2WS(std::string(xmlPrint.CStr())).c_str());

	strXml.Replace(wxString::Format(wxT("<%s"), wxELEMENT_LIST), wxString::Format(wxT("\n<%s"), wxELEMENT_LIST));
	strXml.Replace(wxString::Format(wxT("<%s"), wxELEMENT_GROUP), wxString::Format(wxT("\n  <%s"), wxELEMENT_GROUP));
	strXml.Replace(wxString::Format(wxT("<%s"), wxELEMENT_ITEM), wxString::Format(wxT("\n    <%s"), wxELEMENT_ITEM));
	strXml.Replace(wxString::Format(wxT("</%s"), wxELEMENT_GROUP), wxString::Format(wxT("\n  </%s"), wxELEMENT_GROUP));
	strXml.Replace(wxString::Format(wxT("</%s"), wxELEMENT_LIST), wxString::Format(wxT("\n</%s"), wxELEMENT_LIST));

	m_txtXml->SetValue(strXml);

}

/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON1
 */

void ListMakerDlg::OnAddClick( wxCommandEvent& event )
{
	wxString caption = wxT("");
	wxString wildcard = wxT("All files(*.*)|*.*");
	wxString defaultDir = wxT("/");
	wxString defaultFilename = wxEmptyString;

	wxFileDialog dialog(this, caption, defaultDir, defaultFilename, wildcard, wxOPEN|wxFD_MULTIPLE|wxFD_FILE_MUST_EXIST);

	if(wxID_OK == dialog.ShowModal())
	{
		wxArrayString names;
		dialog.GetFilenames(names);

		AddFiles(names, m_txtDir->GetValue());
	}

    event.Skip();
}

void ListMakerDlg::OpenAFile(wxString &fpath)
{
	wxTextFile file;

	if(false == file.Open(fpath))
		return;

	wxString ftext;
	size_t lcnt = file.GetLineCount();
	for(size_t i = 0; i < lcnt; i ++)
	{
		ftext.Append(file.GetLine(i));
		if(i < lcnt - 1)
			ftext.Append(wxT("\n"));
	}
	m_txtXml->SetValue(ftext);
	m_labelFile->SetLabel(fpath);
}

/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON2
 */

void ListMakerDlg::OnOpenClick( wxCommandEvent& event )
{
	wxString caption = wxT("");
	wxString wildcard = wxT("XML files(*.xml)|*.xml|All files(*.*)|*.*");
	wxString defaultDir = wxT("/");
	wxString defaultFilename = wxEmptyString;

	wxFileDialog dialog(this, caption, defaultDir, defaultFilename, wildcard, wxOPEN|wxFD_FILE_MUST_EXIST);

	if(wxID_OK == dialog.ShowModal())
	{
		OpenAFile(dialog.GetPath());
	}

    event.Skip();
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON3
 */

void ListMakerDlg::OnBuildClick( wxCommandEvent& event )
{
    event.Skip();
}


/*
 * wxEVT_COMMAND_BUTTON_CLICKED event handler for ID_BUTTON4
 */

void ListMakerDlg::OnSaveClick( wxCommandEvent& event )
{
	wxString caption = wxT("");
	wxString wildcard = wxT("XML files(*.xml)|*.xml|All files(*.*)|*.*");
	wxString defaultDir = wxT("/");
	wxString defaultFilename = wxEmptyString;

	wxFileDialog dialog(this, caption, defaultDir, defaultFilename, wildcard, wxSAVE);

	if(wxID_OK == dialog.ShowModal())
	{
		wxString path = dialog.GetPath();
		int filterIndex = dialog.GetFilterIndex();
	}

    event.Skip();
}

