void hardwareSkinningThreeWeights_vp(
	float4 position : POSITION,
	float3 normal   : NORMAL,
	float2 uv       : TEXCOORD0,
	float4 blendIdx : BLENDINDICES,
	float4 blendWgt : BLENDWEIGHT,
	
	out float4 oPosition : POSITION,
	out float2 oUv       : TEXCOORD0,
	out float4 oColour    : COLOR,
	
	// vs2和vs3 最多只能支持256个参数(float4)，一块骨头算3个参数，一般最多也就支持80块骨头
	// 目前男的是48块骨头，女的是50块，以最大数做参数
	uniform float3x4 worldMatrix3x4Array[50],
	uniform float4x4 viewProjectionMatrix,
	uniform float4   ambient,
	uniform float4   emissive,
	// 模拟固定管线支持8盏灯
	uniform float4   lightPos[8],
	uniform float4   lightDiffuse[8],
	uniform float4   lightAtten[8])
{
	float4 blendPos = float4(0,0,0,0);
	int i;
	for (i = 0; i < 3; ++i)
	{
		blendPos += float4(mul(worldMatrix3x4Array[blendIdx[i]], position).xyz, 1.0) * blendWgt[i];
	}
	// blendPos已经是世界坐标了
	oPosition = mul(viewProjectionMatrix, blendPos);
	
	oUv = uv;
	
	float3 N = float3(0,0,0);
	for (i = 0; i < 3; ++i)
	{
		N += mul((float3x3)worldMatrix3x4Array[blendIdx[i]], normal) * blendWgt[i];
	}
	N = normalize(N);
	
	// 只支持点光源和方向光
	float3 lightDir;
	float D,A;
	float4 diffuse = float4(0,0,0,0);
	for (i = 0; i < 8; ++i)
	{
		D = length( lightPos[i].xyz - blendPos.xyz );
		A = D>lightAtten[i].x ? 0 : 1.0/dot(float3(lightAtten[i].yzw), float3(1,D,D*D));
		lightDir = normalize(lightPos[i].xyz - (blendPos.xyz * lightPos[i].w)); //这里乘个w是因为方向光的w为0
		diffuse += max(dot(N, lightDir),0) * lightDiffuse[i] * A;
	}

	oColour = saturate( ambient + diffuse + emissive );
}

void hardwareSkinningThreeWeightsCaster_vp(
	float4 position : POSITION,
	float3 normal   : NORMAL,
	float2 uv       : TEXCOORD0,
	float4 blendIdx : BLENDINDICES,
	float4 blendWgt : BLENDWEIGHT,

	out float4 oPosition : POSITION,
	out float4 colour    : COLOR,
	
	uniform float3x4   worldMatrix3x4Array[50],
	uniform float4x4   viewProjectionMatrix,
	uniform float4     ambient)
{
	float4 blendPos = float4(0,0,0,0);
	int i;
	for (i = 0; i < 3; ++i)
	{
		blendPos += float4(mul(worldMatrix3x4Array[blendIdx[i]], position).xyz, 1.0) * blendWgt[i];
	}
	oPosition = mul(viewProjectionMatrix, blendPos);
	
	colour = ambient;
}